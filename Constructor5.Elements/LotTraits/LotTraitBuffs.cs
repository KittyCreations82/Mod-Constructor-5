using Constructor5.Base.ElementSystem;
using Constructor5.Base.ExportSystem.Tuning;
using Constructor5.Base.ExportSystem.Tuning.Utilities;
using Constructor5.Core;
using Constructor5.Elements.Buffs.Components;
using Constructor5.Elements.Buffs.References;
using Constructor5.UI.AutoGeneratedEditors;

namespace Constructor5.Elements.LotTraits
{
    [XmlSerializerExtraType]
    public class LotTraitBuffs : LotTraitComponent
    {
        public ReferenceList Buffs { get; set; } = new ReferenceList();

        public override int ComponentDisplayOrder => 2;
        public override string ComponentLabel => "LotTraitBuffs";

        protected internal override void OnExport(LotTraitExportContext context)
        {
            var tunableList1 = context.Tuning.Get<TunableList>("enter_lot_loot");
            tunableList1.Set<TunableBasic>(null, CreateAddLoot(context));
            var tunableList2 = context.Tuning.Get<TunableList>("exit_lot_loot");
            tunableList2.Set<TunableBasic>(null, CreateRemoveLoot(context));
        }

        private ulong CreateAddLoot(LotTraitExportContext context)
        {
            var lootTuning = ElementTuning.Create(context.Element, "BuffAddLoot");
            lootTuning.Class = "LootActions";
            lootTuning.InstanceType = "action";
            lootTuning.Module = "interactions.utils.loot";

            var tunableList1 = lootTuning.Get<TunableList>("loot_actions");

            foreach (var item in Buffs.GetOfType<BuffWithReasonReferenceListItem>())
            {
                foreach (var buff in ElementTuning.GetInstanceKeys(item.Reference))
                {
                    var tunableVariant1 = tunableList1.Set<TunableVariant>(null, "buff");
                    var tunableTuple1 = tunableVariant1.Get<TunableTuple>("buff");
                    var tunableTuple2 = tunableTuple1.Get<TunableTuple>("buff");
                    tunableTuple2.Set<TunableBasic>("buff_type", buff);

                    if (!string.IsNullOrEmpty(item.Reason.CustomText))
                    {
                        var reasonVariant = tunableTuple2.Set<TunableVariant>("buff_reason", "enabled");
                        reasonVariant.Set<TunableBasic>("enabled", item.Reason);
                    }

                    var tunableList2 = tunableTuple1.Get<TunableList>("tests");
                    var tunableList3 = tunableList2.Get<TunableList>(null);
                    var tunableVariant2 = tunableList3.Set<TunableVariant>(null, "buff");
                    var tunableTuple3 = tunableVariant2.Get<TunableTuple>("buff");
                    var tunableList4 = tunableTuple3.Get<TunableList>("blacklist");
                    tunableList4.Set<TunableBasic>(null, buff);
                }
            }

            TuningExport.AddToQueue(lootTuning);

            return lootTuning.InstanceKey;
        }

        private object CreateRemoveLoot(LotTraitExportContext context)
        {
            var lootTuning = ElementTuning.Create(context.Element, "BuffRemoveLoot");
            lootTuning.Class = "LootActions";
            lootTuning.InstanceType = "action";
            lootTuning.Module = "interactions.utils.loot";

            var tunableList1 = lootTuning.Get<TunableList>("loot_actions");

            foreach (var buff in ElementTuning.GetInstanceKeys(Buffs))
            {
                var tunableVariant1 = tunableList1.Set<TunableVariant>(null, "buff_removal");
                var tunableTuple1 = tunableVariant1.Get<TunableTuple>("buff_removal");
                var tunableList2 = tunableTuple1.Get<TunableList>("buffs_to_remove");
                tunableList2.Set<TunableBasic>(null, buff);
            }

            TuningExport.AddToQueue(lootTuning);

            return lootTuning.InstanceKey;
        }
    }
}